
121_RANDOM_NUMBER_GENERATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000082c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009b4  080009b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080009b4  080009b4  000109b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080009b8  080009b8  000109b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080009bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          000000b0  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000c0  200000c0  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000422e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000d18  00000000  00000000  0002426e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000630  00000000  00000000  00024f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000598  00000000  00000000  000255b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002205  00000000  00000000  00025b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000216d  00000000  00000000  00027d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00029ec2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000190c  00000000  00000000  00029f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002b84c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800099c 	.word	0x0800099c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800099c 	.word	0x0800099c

080001c8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <DAC_SetChannel1Data+0x34>)
 80001da:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	3308      	adds	r3, #8
 80001e4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	461a      	mov	r2, r3
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40007400 	.word	0x40007400

08000200 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <DMA_Init+0xac>)
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800022a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000236:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000254:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	f023 0307 	bic.w	r3, r3, #7
 800026e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4313      	orrs	r3, r2
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	691a      	ldr	r2, [r3, #16]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	60da      	str	r2, [r3, #12]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	f01c803f 	.word	0xf01c803f

080002b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0201 	orr.w	r2, r3, #1
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002ce:	e005      	b.n	80002dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f023 0201 	bic.w	r2, r3, #1
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d002      	beq.n	8000306 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <DMA_GetFlagStatus+0x6c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d802      	bhi.n	8000338 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <DMA_GetFlagStatus+0x70>)
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e001      	b.n	800033c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <DMA_GetFlagStatus+0x74>)
 800033a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e002      	b.n	8000354 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800035a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800035e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800036a:	2301      	movs	r3, #1
 800036c:	75fb      	strb	r3, [r7, #23]
 800036e:	e001      	b.n	8000374 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	4002640f 	.word	0x4002640f
 8000388:	40026000 	.word	0x40026000
 800038c:	40026400 	.word	0x40026400

08000390 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <DMA_ClearFlag+0x50>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d802      	bhi.n	80003a8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <DMA_ClearFlag+0x54>)
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e001      	b.n	80003ac <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <DMA_ClearFlag+0x58>)
 80003aa:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d007      	beq.n	80003c6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003bc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003c4:	e006      	b.n	80003d4 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003cc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	6093      	str	r3, [r2, #8]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	4002640f 	.word	0x4002640f
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026400 	.word	0x40026400

080003ec <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d006      	beq.n	800040c <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80003fe:	490a      	ldr	r1, [pc, #40]	; (8000428 <RCC_AHB2PeriphClockCmd+0x3c>)
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <RCC_AHB2PeriphClockCmd+0x3c>)
 8000402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4313      	orrs	r3, r2
 8000408:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 800040a:	e006      	b.n	800041a <RCC_AHB2PeriphClockCmd+0x2e>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800040c:	4906      	ldr	r1, [pc, #24]	; (8000428 <RCC_AHB2PeriphClockCmd+0x3c>)
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <RCC_AHB2PeriphClockCmd+0x3c>)
 8000410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	43db      	mvns	r3, r3
 8000416:	4013      	ands	r3, r2
 8000418:	634b      	str	r3, [r1, #52]	; 0x34
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40023800 	.word	0x40023800

0800042c <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d006      	beq.n	800044a <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 800043c:	4a09      	ldr	r2, [pc, #36]	; (8000464 <RNG_Cmd+0x38>)
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <RNG_Cmd+0x38>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
 8000448:	e005      	b.n	8000456 <RNG_Cmd+0x2a>
    RNG->CR &= ~RNG_CR_RNGEN;
 800044a:	4a06      	ldr	r2, [pc, #24]	; (8000464 <RNG_Cmd+0x38>)
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <RNG_Cmd+0x38>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f023 0304 	bic.w	r3, r3, #4
 8000454:	6013      	str	r3, [r2, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	50060800 	.word	0x50060800

08000468 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 800046c:	4b03      	ldr	r3, [pc, #12]	; (800047c <RNG_GetRandomNumber+0x14>)
 800046e:	689b      	ldr	r3, [r3, #8]
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	50060800 	.word	0x50060800

08000480 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	887a      	ldrh	r2, [r7, #2]
 8000490:	819a      	strh	r2, [r3, #12]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800049e:	b480      	push	{r7}
 80004a0:	b085      	sub	sp, #20
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
 80004a6:	460b      	mov	r3, r1
 80004a8:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80004aa:	2300      	movs	r3, #0
 80004ac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	891b      	ldrh	r3, [r3, #8]
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	887b      	ldrh	r3, [r7, #2]
 80004b6:	4013      	ands	r3, r2
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d002      	beq.n	80004c4 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80004be:	2301      	movs	r3, #1
 80004c0:	73fb      	strb	r3, [r7, #15]
 80004c2:	e001      	b.n	80004c8 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
	...

080004d8 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80004dc:	4b38      	ldr	r3, [pc, #224]	; (80005c0 <Audio_MAL_IRQHandler+0xe8>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b38      	ldr	r3, [pc, #224]	; (80005c4 <Audio_MAL_IRQHandler+0xec>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4619      	mov	r1, r3
 80004e6:	4610      	mov	r0, r2
 80004e8:	f7ff ff16 	bl	8000318 <DMA_GetFlagStatus>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d064      	beq.n	80005bc <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80004f2:	4b35      	ldr	r3, [pc, #212]	; (80005c8 <Audio_MAL_IRQHandler+0xf0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d04c      	beq.n	8000594 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80004fa:	bf00      	nop
 80004fc:	4b30      	ldr	r3, [pc, #192]	; (80005c0 <Audio_MAL_IRQHandler+0xe8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fef1 	bl	80002e8 <DMA_GetCmdStatus>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d1f7      	bne.n	80004fc <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800050c:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <Audio_MAL_IRQHandler+0xe8>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <Audio_MAL_IRQHandler+0xec>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	4610      	mov	r0, r2
 8000518:	f7ff ff3a 	bl	8000390 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800051c:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <Audio_MAL_IRQHandler+0xf4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <Audio_MAL_IRQHandler+0xf8>)
 8000524:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000526:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <Audio_MAL_IRQHandler+0xf0>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800052e:	4293      	cmp	r3, r2
 8000530:	bf28      	it	cs
 8000532:	4613      	movcs	r3, r2
 8000534:	4a26      	ldr	r2, [pc, #152]	; (80005d0 <Audio_MAL_IRQHandler+0xf8>)
 8000536:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000538:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <Audio_MAL_IRQHandler+0xe8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4924      	ldr	r1, [pc, #144]	; (80005d0 <Audio_MAL_IRQHandler+0xf8>)
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fe5e 	bl	8000200 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <Audio_MAL_IRQHandler+0xe8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2101      	movs	r1, #1
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff feb0 	bl	80002b0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000550:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <Audio_MAL_IRQHandler+0xf4>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <Audio_MAL_IRQHandler+0xf0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800055c:	d203      	bcs.n	8000566 <Audio_MAL_IRQHandler+0x8e>
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <Audio_MAL_IRQHandler+0xf0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	e000      	b.n	8000568 <Audio_MAL_IRQHandler+0x90>
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <Audio_MAL_IRQHandler+0xfc>)
 8000568:	4413      	add	r3, r2
 800056a:	4a18      	ldr	r2, [pc, #96]	; (80005cc <Audio_MAL_IRQHandler+0xf4>)
 800056c:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <Audio_MAL_IRQHandler+0xf0>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <Audio_MAL_IRQHandler+0xf0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800057a:	428b      	cmp	r3, r1
 800057c:	bf28      	it	cs
 800057e:	460b      	movcs	r3, r1
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <Audio_MAL_IRQHandler+0xf0>)
 8000584:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <Audio_MAL_IRQHandler+0xe8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2101      	movs	r1, #1
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fe8f 	bl	80002b0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000592:	e013      	b.n	80005bc <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <Audio_MAL_IRQHandler+0xe8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe88 	bl	80002b0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <Audio_MAL_IRQHandler+0xe8>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <Audio_MAL_IRQHandler+0xec>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	4610      	mov	r0, r2
 80005ac:	f7ff fef0 	bl	8000390 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <Audio_MAL_IRQHandler+0xf4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f8ae 	bl	8000718 <EVAL_AUDIO_TransferComplete_CallBack>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000008 	.word	0x20000008
 80005c4:	2000000c 	.word	0x2000000c
 80005c8:	20000000 	.word	0x20000000
 80005cc:	2000002c 	.word	0x2000002c
 80005d0:	2000006c 	.word	0x2000006c
 80005d4:	0001fffe 	.word	0x0001fffe

080005d8 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80005dc:	f7ff ff7c 	bl	80004d8 <Audio_MAL_IRQHandler>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80005e8:	f7ff ff76 	bl	80004d8 <Audio_MAL_IRQHandler>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80005f4:	2102      	movs	r1, #2
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <SPI3_IRQHandler+0x3c>)
 80005f8:	f7ff ff51 	bl	800049e <SPI_I2S_GetFlagStatus>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d011      	beq.n	8000626 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <SPI3_IRQHandler+0x40>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b02      	cmp	r3, #2
 8000608:	d106      	bne.n	8000618 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800060a:	f000 f890 	bl	800072e <EVAL_AUDIO_GetSampleCallBack>
 800060e:	4603      	mov	r3, r0
 8000610:	4619      	mov	r1, r3
 8000612:	2004      	movs	r0, #4
 8000614:	f7ff fdd8 	bl	80001c8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000618:	f000 f889 	bl	800072e <EVAL_AUDIO_GetSampleCallBack>
 800061c:	4603      	mov	r3, r0
 800061e:	4619      	mov	r1, r3
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <SPI3_IRQHandler+0x3c>)
 8000622:	f7ff ff2d 	bl	8000480 <SPI_I2S_SendData>
  }
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40003c00 	.word	0x40003c00
 8000630:	20000004 	.word	0x20000004

08000634 <RNG_Config>:
uint32_t myRandomNumber;
uint32_t yazi,tura,count;
float oranYazi,oranTura;

void RNG_Config()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG,ENABLE);
 8000638:	2101      	movs	r1, #1
 800063a:	2040      	movs	r0, #64	; 0x40
 800063c:	f7ff fed6 	bl	80003ec <RCC_AHB2PeriphClockCmd>

	RNG_Cmd(ENABLE);
 8000640:	2001      	movs	r0, #1
 8000642:	f7ff fef3 	bl	800042c <RNG_Cmd>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}

0800064a <Delay>:

void Delay(uint32_t time)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	while(time--);
 8000652:	bf00      	nop
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	1e5a      	subs	r2, r3, #1
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1fa      	bne.n	8000654 <Delay+0xa>
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
	...

0800066c <main>:

int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	RNG_Config();
 8000670:	f7ff ffe0 	bl	8000634 <RNG_Config>
  while (1)
  {
	  myRandomNumber = RNG_GetRandomNumber();
 8000674:	f7ff fef8 	bl	8000468 <RNG_GetRandomNumber>
 8000678:	4602      	mov	r2, r0
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <main+0x88>)
 800067c:	601a      	str	r2, [r3, #0]
	  Delay(21000000);
 800067e:	481e      	ldr	r0, [pc, #120]	; (80006f8 <main+0x8c>)
 8000680:	f7ff ffe3 	bl	800064a <Delay>

	  count++;
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <main+0x90>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <main+0x90>)
 800068c:	6013      	str	r3, [r2, #0]

	  if(count <= 1000000)
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <main+0x90>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <main+0x94>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d80f      	bhi.n	80006b8 <main+0x4c>
	  {
		  if(myRandomNumber < 2147483648)
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <main+0x88>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db05      	blt.n	80006ac <main+0x40>
			  yazi++;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <main+0x98>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a17      	ldr	r2, [pc, #92]	; (8000704 <main+0x98>)
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	e7e3      	b.n	8000674 <main+0x8>
		  else
			  tura++;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <main+0x9c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <main+0x9c>)
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	e7dd      	b.n	8000674 <main+0x8>
	  }
	  else
	  {
		  oranYazi = (float)yazi / 10000000;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <main+0x98>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	ee07 3a90 	vmov	s15, r3
 80006c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006c4:	eddf 6a11 	vldr	s13, [pc, #68]	; 800070c <main+0xa0>
 80006c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <main+0xa4>)
 80006ce:	edc3 7a00 	vstr	s15, [r3]
		  oranTura = (float)tura / 10000000;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <main+0x9c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	ee07 3a90 	vmov	s15, r3
 80006da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006de:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800070c <main+0xa0>
 80006e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <main+0xa8>)
 80006e8:	edc3 7a00 	vstr	s15, [r3]
		  RNG_Cmd(DISABLE);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff fe9d 	bl	800042c <RNG_Cmd>
	  myRandomNumber = RNG_GetRandomNumber();
 80006f2:	e7bf      	b.n	8000674 <main+0x8>
 80006f4:	200000b8 	.word	0x200000b8
 80006f8:	01406f40 	.word	0x01406f40
 80006fc:	200000b4 	.word	0x200000b4
 8000700:	000f4240 	.word	0x000f4240
 8000704:	200000a8 	.word	0x200000a8
 8000708:	200000ac 	.word	0x200000ac
 800070c:	4b189680 	.word	0x4b189680
 8000710:	200000b0 	.word	0x200000b0
 8000714:	200000bc 	.word	0x200000bc

08000718 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000722:	bf00      	nop
}
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8000732:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000778 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000744:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000746:	e003      	b.n	8000750 <LoopCopyDataInit>

08000748 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800074a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800074c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800074e:	3104      	adds	r1, #4

08000750 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000754:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000756:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000758:	d3f6      	bcc.n	8000748 <CopyDataInit>
  ldr  r2, =_sbss
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800075c:	e002      	b.n	8000764 <LoopFillZerobss>

0800075e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800075e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000760:	f842 3b04 	str.w	r3, [r2], #4

08000764 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000766:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000768:	d3f9      	bcc.n	800075e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800076a:	f000 f841 	bl	80007f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800076e:	f000 f8f1 	bl	8000954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000772:	f7ff ff7b 	bl	800066c <main>
  bx  lr    
 8000776:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000778:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800077c:	080009bc 	.word	0x080009bc
  ldr  r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000784:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000788:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800078c:	200000c0 	.word	0x200000c0

08000790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC_IRQHandler>

08000792 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <HardFault_Handler+0x4>

080007a6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <MemManage_Handler+0x4>

080007ac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <BusFault_Handler+0x4>

080007b2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <UsageFault_Handler+0x4>

080007b8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f4:	4a16      	ldr	r2, [pc, #88]	; (8000850 <SystemInit+0x60>)
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <SystemInit+0x60>)
 80007f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <SystemInit+0x64>)
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <SystemInit+0x64>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <SystemInit+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <SystemInit+0x64>)
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <SystemInit+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000824:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <SystemInit+0x64>)
 8000828:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <SystemInit+0x68>)
 800082a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <SystemInit+0x64>)
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <SystemInit+0x64>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000836:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800083e:	f000 f80d 	bl	800085c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000842:	4b03      	ldr	r3, [pc, #12]	; (8000850 <SystemInit+0x60>)
 8000844:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000848:	609a      	str	r2, [r3, #8]
#endif
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00
 8000854:	40023800 	.word	0x40023800
 8000858:	24003010 	.word	0x24003010

0800085c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800086a:	4a36      	ldr	r2, [pc, #216]	; (8000944 <SetSysClock+0xe8>)
 800086c:	4b35      	ldr	r3, [pc, #212]	; (8000944 <SetSysClock+0xe8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000874:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <SetSysClock+0xe8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d103      	bne.n	8000894 <SetSysClock+0x38>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000892:	d1f0      	bne.n	8000876 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <SetSysClock+0xe8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80008a0:	2301      	movs	r3, #1
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	e001      	b.n	80008aa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d142      	bne.n	8000936 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008b0:	4a24      	ldr	r2, [pc, #144]	; (8000944 <SetSysClock+0xe8>)
 80008b2:	4b24      	ldr	r3, [pc, #144]	; (8000944 <SetSysClock+0xe8>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ba:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80008bc:	4a22      	ldr	r2, [pc, #136]	; (8000948 <SetSysClock+0xec>)
 80008be:	4b22      	ldr	r3, [pc, #136]	; (8000948 <SetSysClock+0xec>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80008c8:	4a1e      	ldr	r2, [pc, #120]	; (8000944 <SetSysClock+0xe8>)
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <SetSysClock+0xe8>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80008d0:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <SetSysClock+0xe8>)
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <SetSysClock+0xe8>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008da:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80008dc:	4a19      	ldr	r2, [pc, #100]	; (8000944 <SetSysClock+0xe8>)
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <SetSysClock+0xe8>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80008e6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <SetSysClock+0xe8>)
 80008ea:	4a18      	ldr	r2, [pc, #96]	; (800094c <SetSysClock+0xf0>)
 80008ec:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <SetSysClock+0xe8>)
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <SetSysClock+0xe8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008f8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80008fa:	bf00      	nop
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <SetSysClock+0xe8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f9      	beq.n	80008fc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <SetSysClock+0xf4>)
 800090a:	f240 6205 	movw	r2, #1541	; 0x605
 800090e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000910:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <SetSysClock+0xe8>)
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <SetSysClock+0xe8>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	f023 0303 	bic.w	r3, r3, #3
 800091a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800091c:	4a09      	ldr	r2, [pc, #36]	; (8000944 <SetSysClock+0xe8>)
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <SetSysClock+0xe8>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	f043 0302 	orr.w	r3, r3, #2
 8000926:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000928:	bf00      	nop
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <SetSysClock+0xe8>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 030c 	and.w	r3, r3, #12
 8000932:	2b08      	cmp	r3, #8
 8000934:	d1f9      	bne.n	800092a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000
 800094c:	07405408 	.word	0x07405408
 8000950:	40023c00 	.word	0x40023c00

08000954 <__libc_init_array>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	4e0d      	ldr	r6, [pc, #52]	; (800098c <__libc_init_array+0x38>)
 8000958:	4c0d      	ldr	r4, [pc, #52]	; (8000990 <__libc_init_array+0x3c>)
 800095a:	1ba4      	subs	r4, r4, r6
 800095c:	10a4      	asrs	r4, r4, #2
 800095e:	2500      	movs	r5, #0
 8000960:	42a5      	cmp	r5, r4
 8000962:	d109      	bne.n	8000978 <__libc_init_array+0x24>
 8000964:	4e0b      	ldr	r6, [pc, #44]	; (8000994 <__libc_init_array+0x40>)
 8000966:	4c0c      	ldr	r4, [pc, #48]	; (8000998 <__libc_init_array+0x44>)
 8000968:	f000 f818 	bl	800099c <_init>
 800096c:	1ba4      	subs	r4, r4, r6
 800096e:	10a4      	asrs	r4, r4, #2
 8000970:	2500      	movs	r5, #0
 8000972:	42a5      	cmp	r5, r4
 8000974:	d105      	bne.n	8000982 <__libc_init_array+0x2e>
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800097c:	4798      	blx	r3
 800097e:	3501      	adds	r5, #1
 8000980:	e7ee      	b.n	8000960 <__libc_init_array+0xc>
 8000982:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000986:	4798      	blx	r3
 8000988:	3501      	adds	r5, #1
 800098a:	e7f2      	b.n	8000972 <__libc_init_array+0x1e>
 800098c:	080009b4 	.word	0x080009b4
 8000990:	080009b4 	.word	0x080009b4
 8000994:	080009b4 	.word	0x080009b4
 8000998:	080009b8 	.word	0x080009b8

0800099c <_init>:
 800099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099e:	bf00      	nop
 80009a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a2:	bc08      	pop	{r3}
 80009a4:	469e      	mov	lr, r3
 80009a6:	4770      	bx	lr

080009a8 <_fini>:
 80009a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009aa:	bf00      	nop
 80009ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ae:	bc08      	pop	{r3}
 80009b0:	469e      	mov	lr, r3
 80009b2:	4770      	bx	lr
